Element.swift
	public protocol AbstractBSONBase {}
	var elementType: ElementType { get }
Boolean.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Bool
	public static let bsonLength = BsonLength.Fixed(length: 1)
NSDate.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Self
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Self
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 8)
Integer32.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Int32
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Int32
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 4)
RegularExpression.swift
	public struct RegularExpression
	public var pattern: String
	public var options: String
	public struct RegularExpression
	public var elementType: ElementType
	public var bsonData: [UInt8]
	public static var bsonLength: BsonLength
	public static func instantiate(bsonData data: [UInt8]) throws -> RegularExpression
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> RegularExpression
Binary.swift
	public var elementType: ElementType
	public var data: [UInt8]
	public let subType: UInt8
	public var bsonData: [UInt8]
	public static var bsonLength: BsonLength
	public init(data: NSData, subType: UInt8 = 0)
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Binary
	public static func instantiate(bsonData data: [UInt8]) throws -> Binary
Integer16.swift
	public static func instantiate(bsonData data: [UInt8]) throws -> Int16
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Int16
	public var bsonData: [UInt8]
String.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> String
	public var cStringBsonData: [UInt8]
	public static let bsonLength = BsonLength.Undefined
Null.swift
	public struct Null : BSONElementConvertible
	public init() {}
	public var elementType: ElementType
	public static var bsonLength: BsonLength
	public static func instantiate(bsonData data: [UInt8]) throws -> Null
Timestamp.swift
	public var elementType: ElementType
	public var bsonData: [UInt8]
	public static var bsonLength: BsonLength
	public static func instantiate(bsonData data: [UInt8]) throws -> Timestamp
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Timestamp
Integer64.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Int64
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Int64
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 8)
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Int
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Int
	public var bsonData: [UInt8]
	public static let bsonLength = Int64.bsonLength
ObjectId.swift
	public struct ObjectId
	public private(set) var data: [UInt8]
	public init(hexString: String) throws
	public init(bsonData: [UInt8]) throws
	public var hexString: String
	public init()
	public struct ObjectId
	public var elementType: ElementType
	public static var bsonLength: BsonLength
	public static func instantiate(bsonData data: [UInt8]) throws -> ObjectId
	public struct ObjectId
	public var debugDescription: String
Double.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Double
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Double
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 8)
MinMaxKey.swift
	public struct MinKey : BSONElementConvertible
	public init() {}
	public let elementType = ElementType.MinKey
	public let bsonData = [UInt8]()
	public static var bsonLength = BsonLength.Fixed(length: 0)
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> MinKey
	public static func instantiate(bsonData data: [UInt8]) throws -> MinKey
	public struct MaxKey : BSONElementConvertible
	public init() {}
	public let elementType = ElementType.MaxKey
	public let bsonData = [UInt8]()
	public static var bsonLength = BsonLength.Fixed(length: 0)
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> MaxKey
	public static func instantiate(bsonData data: [UInt8]) throws -> MaxKey
Document.swift
	public struct Document
	public init(data: NSData) throws
	public init(data: [UInt8]) throws
	public struct Document
	public var elementType: ElementType
	public var bsonData: [UInt8]
	public static func instantiate(bsonData data: [UInt8]) throws -> Document
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Document
	public static let bsonLength = BsonLength.Undefined
	public struct Document
	public init(array: [BSONElementConvertible])
	public struct Document
	public struct Document
	public var startIndex: DictionaryIndex<Key, FooValue>
	public var endIndex: DictionaryIndex<Key, FooValue>
	public func indexForKey(key: Key) -> DictionaryIndex<Key, FooValue>?
	public mutating func updateValue(value: FooValue, forKey key: Key) -> FooValue?
	public mutating func removeAtIndex(index: DictionaryIndex<Key, FooValue>) -> (Key, FooValue)
	public mutating func removeValueForKey(key: Key) -> FooValue?
	public mutating func removeAll(keepCapacity keepCapacity: Bool = false)
	public var count: Int
	public func generate() -> DictionaryGenerator<Key, FooValue>
	public var keys: LazyMapCollection<[Key : FooValue], Key>
	public var values: LazyMapCollection<[Key : FooValue], FooValue>
	public var isEmpty: Bool
	public struct Document
	public var description: String
