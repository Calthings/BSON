Element.swift
	public protocol AbstractBSONBase {}
	public enum ElementType : UInt8
	case Double = 0x01
	case String = 0x02
	case Document = 0x03
	case Array = 0x04
	case Binary = 0x05
	case ObjectId = 0x07
	case Boolean = 0x08
	case DateTime = 0x09
	case NullValue = 0x0A
	case RegularExpression = 0x0B
	case JavaScriptCode = 0x0D
	case JavascriptCodeWithScope = 0x0F
	case Int32 = 0x10
	case Timestamp = 0x11
	case Int64 = 0x12
	case MinKey = 0xFF
	case MaxKey = 0x7F
	public enum BsonLength
	case Undefined
	case Fixed(length: Int)
	case NullTerminated
	public protocol BSONElementConvertible : AbstractBSONBase
	var elementType: ElementType { get }
	static var bsonLength: BsonLength { get }
	static func instantiate(bsonData data: [UInt8]) throws -> Self
Boolean.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Bool
	public static let bsonLength = BsonLength.Fixed(length: 1)
UTCDateTime.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Self
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Self
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 8)
Integer32.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Int32
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Int32
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 4)
Binary.swift
	public struct Binary : BSONElementConvertible
	public var elementType: ElementType
	public var data: [UInt8]
	public let subType: UInt8
	public var bsonData: [UInt8]
	public static var bsonLength: BsonLength
	public init(binaryData: [UInt8], subType: UInt8 = 0)
	public static func instantiate(bsonData data: [UInt8]) throws -> Binary
	public convenience init(_ binary: Binary)
Error.swift
	public enum DeserializationError : ErrorType
	case InvalidDocumentLength
	case InvalidElementSize
	case InvalidElementContents
	case UnknownElementType
	case InvalidLastElement
	case ParseError
	case InvalidOperation
ArrayDictionaryDocument.swift
	public prefix func *(input: [String : AbstractBSONBase]) -> [String : AbstractBSONBase]
	public prefix func *(input: [AbstractBSONBase]) -> [AbstractBSONBase]
Integer16.swift
	public static func instantiate(bsonData data: [UInt8]) throws -> Int16
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Int16
	public var bsonData: [UInt8]
String.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> String
	public var cStringBsonData: [UInt8]
	public static let bsonLength = BsonLength.NullTerminated
Null.swift
	public struct Null : BSONElementConvertible
	public var elementType: ElementType
	public static var bsonLength: BsonLength
	public static func instantiate(bsonData data: [UInt8]) throws -> Null
Integer64.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Int
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Int
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 8)
ObjectId.swift
	public struct ObjectId
	public private(set) var data: [UInt8]
	public init(hexString: String) throws
	public init(bsonData: [UInt8]) throws
	public var hexString: String
	public init()
	public struct ObjectId
	public var elementType: ElementType
	public static var bsonLength: BsonLength
	public static func instantiate(bsonData data: [UInt8]) throws -> ObjectId
	public struct ObjectId
	public var debugDescription: String
Double.swift
	public var elementType: ElementType
	public static func instantiate(bsonData data: [UInt8]) throws -> Double
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Double
	public var bsonData: [UInt8]
	public static let bsonLength = BsonLength.Fixed(length: 8)
Document.swift
	public struct Document
	public init(data: NSData) throws
	public init(data: [UInt8], inout consumedBytes: Int) throws
	public struct Document
	public var elementType: ElementType
	public var bsonData: [UInt8]
	public static func instantiate(bsonData data: [UInt8]) throws -> Document
	public static func instantiate(bsonData data: [UInt8], inout consumedBytes: Int) throws -> Document
	public static let bsonLength = BsonLength.Undefined
	public struct Document
	public init(array: [BSONElementConvertible])
	public struct Document
	public struct Document
	public var startIndex: DictionaryIndex<Key, FooValue>
	public var endIndex: DictionaryIndex<Key, FooValue>
	public func indexForKey(key: Key) -> DictionaryIndex<Key, FooValue>?
	public mutating func updateValue(value: FooValue, forKey key: Key) -> FooValue?
	public mutating func removeAtIndex(index: DictionaryIndex<Key, FooValue>) -> (Key, FooValue)
	public mutating func removeValueForKey(key: Key) -> FooValue?
	public mutating func removeAll(keepCapacity keepCapacity: Bool = false)
	public var count: Int
	public func generate() -> DictionaryGenerator<Key, FooValue>
	public var keys: LazyMapCollection<[Key : FooValue], Key>
	public var values: LazyMapCollection<[Key : FooValue], FooValue>
	public var isEmpty: Bool
